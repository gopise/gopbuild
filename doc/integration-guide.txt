/*************************************************************************
 *
 * A guide for integrating uboot/kernel/application source code and 
 * external SDK  into "Gopbuild" linux build toolset
 *
 *
 * Author: Taichun Yuan, taichun.yuan@freescale.com
 *
 * Date: 08/18/2015
 *************************************************************************/

1. Description
    This document is targeted to provide a guide for integrating uboot, kernel,
    application and external SDK from another environment such as LTIB and Yocto.

2. uboot and kernel integration
    Integrating uboot and kernel source code is quiet straight forward:
        a, Delete all files EXCEPT "gopcook.sh" under uboot and kernel folder
            Note: each has a "gopcook.sh" and are different. Don't mix it.
        b, Copy new uboot and kernel source code into uboot and kernel folder
        c, Change corresponding "gopcook.sh" only if the method of compiling
            or installing has been changed.

3. Application integration
    The integration of application varies between each other. We will only
    introduce some basic rules here.
    How to add your new application:
        a, Create a new folder under "rootfs" folder to hold your new app.
        b, Copy an existing "gopcook.sh" from other folders under "rootfs"
            to the new folder.
        c, Modify the "gopcook.sh":
            Normally, only the following items need to be changed:
                PACKAGE_NAME: change to your app name. Only for easy to recognize.
                do_prepare(): called when doing "configure".
                do_build(): compiling/linking script. Normally a "make" call with
                            environment setup and parameters.
                do_install(): called when preparing the rootfs image. Should 
                              only contain script for installing build result
                              into final rootfs.
                do_clean(): called when cleaning the build.
            Notes:
                1, All necessary environment such as ARCH/CROSS_COMPILE has 
                    been properly setup before calling into "gopcook.sh".
                    For details about what you have, refer to "envsetup" script.
                2, You can pass parameters from "gmk" call into your own script.
                    Please refer to "common_main" function in "envsetup" script.
                3, Touching other parts of the script is not recommended.
        d, Add your folder name into your current rootfs configuration, e.g.:
            export CFG_ROOTFS_SAMPLE=" \
                        helloworld \
                        tools \
                        your-new-app-folder-name \
                        "

            # Active configuration
            export CFG_ROOTFS_ACTIVE_CFG=$CFG_ROOTFS_SAMPLE

4. Yocto SDK integration:
    This is a step by step guidance for integrating a SDK from Yocto environment
    1, Build a target SDK in Yocto.
        Note: SDK size will dramaticlly vary between different configurations.
        Major difference will be the target rootfs part of the SDK.
        For example: if building "fsl-image-qt5", it will contain almost every
        thing and the size is very big after installation (>4GB). In this 
        case, you can build almost any application aginst this rootfs.
        If building the "core-image-minimal", it will be very small and only 
        contains the toolchain and minimal target rootfs. In this case,
        the target rootfs will not contain the header and library for some
        of the moduels. You will not be able to build application which depend 
        on these.
        After a successful build, a ".sh" install package will be got.
    2, Install it in a reference platform. It can be the same machine as the
        building machine. Record the path of the installation, for example:
            /opt/sdk/yocto-sdk-1.7/
    3, Set the original SDK location into the "current-sdk-location" file.
        Normally, it's the installation folder plus "sysroot".
            cd <gopbuild-root>/sdk/
            echo /opt/sdk/yocto-sdk-1.7/sysroot > current-sdk-location
    4, Copy the toolchain folder and the rootfs folder from the SDK installation
        folder to <gopbuild-root>/sdk/. For example:
            cd <gopbuild-root>/sdk/
            cp -r /opt/sdk/yocto-sdk-1.7/sysroot/* <gopbuild-root>/sdk/
            ln -s cortexa9hf-vfp-neon-poky-linux-gnueabi/ target-rootfs
            ln -s x86_64-pokysdk-linux/ toolchain
        After the copy, the sdk folder should be looked like this:
            drwxr-xr-x 18 root   root   4096 Aug 12 15:12 cortexa9hf-vfp-neon-poky-linux-gnueabi
            -rw-r--r--  1 root   root     35 Aug 12 16:51 current-sdk-location
            -rwxrwxrwx  1 root   root   2789 Aug 13 16:23 environment-setup.sh
            -rwxr-xr-x  1 root   root   7933 Aug  7 17:04 relocate_sdk.py
            -rwxrwxrwx  1 root   root   3479 Aug 12 16:51 relocate_sdk.sh
            lrwxrwxrwx  1 root   root     39 Aug 12 16:20 target-rootfs -> cortexa9hf-vfp-neon-poky-linux-gnueabi/
            lrwxrwxrwx  1 root   root     21 Aug 12 16:21 toolchain -> x86_64-pokysdk-linux/
            drwxr-xr-x  8 root   root   4096 Aug 10 10:53 x86_64-pokysdk-linux
    5, Modify "environment-setup.sh" if parameters of the toolchain has been
        changed or the folder structure has been changed compare to previous.
        Checking if everything match your new SDK in this file is recommended.
        This file major contains the cross-compile related environment configuration

5. LTIB <TBD>


